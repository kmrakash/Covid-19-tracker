{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountyPicker/CountryPicker.jsx","App.js","index.js","components/Charts/Charts.module.css","components/CountyPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeAbleUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","lagends","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89cd0aff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport styles from './Cards.module.css';\nimport cx from 'classnames';\n\n\nconst Cards = ({data: { confirmed, recovered, deaths, lastUpdate }}) => {\n    if(!confirmed) {\n        return \"Loading...\";\n    }\n    \n    return (\n        <div className={ styles.container } >\n            <Grid container spacing={3} justify=\"center\">\n            <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Number of Active cases of COVID-19.\n            </Typography>\n          </CardContent>\n        </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" /> </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Recovered people of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\"> <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Deaths of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;\n","import axios from 'axios';\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n\n    let changeAbleUrl = url;\n    if(country) {\n        changeAbleUrl =`${url}/countries/${country}`;\n    }\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeAbleUrl);\n\n        return { confirmed, recovered, deaths, lastUpdate };\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed:dailyData.confirmed.total,\n            deaths:dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        \n        const {data : { countries }} = await axios.get(`${url}/countries`);\n\n        return  countries.map((country) => country.name);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Charts.module.css';\n\nconst Charts = ({data: {confirmed, recovered, deaths}, country}) => {\n    const [ dailyData, setDailyData ] = useState([]);\n\n    useEffect(()=>{\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        } \n        // console.log(dailyData);\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length \n         ? (\n            <Line\n\n            data = {{\n                labels: dailyData.map(({ date }) => date ),\n                datasets: [{\n                  data:  dailyData.map(({ confirmed }) => confirmed ),\n                  label: 'Infected',\n                  borderColor: '#3333ff',\n                  fill: true\n                },\n                {\n                    data:  dailyData.map(({ deaths }) => deaths ),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true\n                }],\n            }}\n\n            />\n        ) : null\n    );\n\n    const barChart = (\n        confirmed\n        ? <Bar \n            \n            data = {{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets:[{\n                    label:'People',\n                    backgroundColor: [\n                        'rgba(0, 0, 250, 0.5)',\n                        'rgba(0, 250, 0,  0.5)',\n                        'rgba(250, 0, 0,  0.5)',\n                    ],\n                    data:[confirmed.value, recovered.value, deaths.value]\n\n                }]\n            }}\n\n            options={{\n                lagends: { display: false },\n                title: { display: true, text: `Current state in ${country}` }\n            }}\n        \n        />\n        : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n\n        </div>\n    )\n}\n\nexport default Charts;","import React , { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [fetchedCountries, setFetchCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchCountries]);\n\n    // console.log(fetchedCountries);\n\n    return (\n        \n            <FormControl className={ styles.formControl }>\n                <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                    <option value=\"\">Global</option>\n            {fetchedCountries.map((country, i)=> <option key={i} value={country} >{country}</option>)}\n                </NativeSelect>\n            </FormControl>\n     \n    )\n}\n\nexport default CountryPicker;","import React from 'react';\nimport { Cards, Charts, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: ''\n    }\n\n    // fetch data from api\n   async componentDidMount() {\n        const fetchedData = await fetchData();\n        console.log(fetchedData); // for debugging \n        this.setState({\n            data: fetchedData,\n        });\n    }\n\n    handleCountryChange = async (country) => {\n        \n        const fetchedData = await fetchData(country);\n\n        this.setState({\n            data: fetchedData,\n            country:country\n        })\n    }\n\n    render() {\n        // a better way to send props\n        const { data, country } = this.state;\n\n        return(\n            <div className={ styles.container }>\n                <Cards data={ data } />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Charts data={ data } country={ country } />\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3hhJ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}